//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package 
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;
	import flash.display.Bitmap;
	import flash.display.BitmapData;

	import flash.geom.*;

	public class PreFabCross extends Mesh
	{
		[Embed(source="images/cube.jpg")]
		private var Cube_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function PreFabCross(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,4.692554473876953*_scale,29.348111152648926*_scale,47.153687477111816*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"cube",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:-1, bothsides:true, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					this.type = ".as";
					this.bothsides = ref.bothsides;
					this.name = ref.name;
					this.pushfront = ref.pushfront;
					this.pushback = ref.pushback;
					this.ownCanvas = ref.ownCanvas;

					oList.push(this);
					this.transform = ref.transform;
					this.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						this.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					this.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="149.9184b9b077c/61.3faa23ff5632/-2c.365af987c69b,14a.00060a24182/61.3fa907c7c2b4/2c.365af987c69b,149.917cbb53850/-61.3fab4036e9b0/2c.365af987c69b,149.9184b9b077c/-61.3fa9dcf17152/-2c.365af987c69b,-14a.0000b5e620f/61.3faa6b0d3b11/2c.365af987c69b,-149.91820f917c3/61.3fab4036e9b0/-2c.365af987c69b,-14a.000021c0331d6/-61.3fa9725c9a03/-2c.365af987c69b,-14a.00060a24182/-61.3fa907c7c2b4/2c.365af987c69b,142.5f7528032e/-61.3fa9dcf17152/-2d.3ae4a98211d7,5d.59792aa9b90c/-61.65dc5bdd97d/-2d.3ae4a98211d7,5d.8f2a0b02141/61.3faa6b0d3b11/-2d.3ae4a98211d7,142.5f7528032e/61.3faa23ff5632/-2d.3ae4a98211d7,5d.597500d94ff4/-61.3faa6b0d3b11/2d.3ae4a98211d7,142.3ba13aa50a0/-61.3fab4036e9b0/2d.3ae4a98211d7,142.254da663c231/61.3fa907c7c2b4/2d.3ae4a98211d7,5d.597baa26c4e8/61.3fa995e38c73/2d.3ae4a98211d7,5d.59792aa9b90c/-63.5af2a5e568b1/-2c.365af987c69b,142.5f7528032e/-63.5af2c96c5b20/-2c.365af987c69b,142.3ba13aa50a0/-64.000011c37937e/2c.365af987c69b,5d.597500d94ff4/-64.0000470de4e0/2c.365af987c69b,5d.597baa26c4e8/63.5af2825e7641/2c.365af987c69b,142.254da663c231/63.5af1f442ac82/2c.365af987c69b,142.5f7528032e/64/-2c.365af987c69b,5d.8f2a0b02141/64.0000470de4e0/-2c.365af987c69b,-72.136071736a18/61.a2fd5f2154/-2d.3ae4a98211d7,4e.491b3d8f57a5/61.3faa6b0d3b11/-2d.3ae4a98211d7,4e.74f69bbfa04/-61.65dc5bdd97d/-2d.3ae4a98211d7,-72.136337fe5ad3/-61.3fa995e38c73/-2d.3ae4a98211d7,-142.2548194de0bb/61.3fab4036e9b0/-2d.3ae4a98211d7,-81.23bf7ac55efd/61.a2fd5f2154/-2d.3ae4a98211d7,-81.23c241504fb8/-61.3fa995e38c73/-2d.3ae4a98211d7,-142.254bfc1064f4/-61.3fa9725c9a03/-2d.3ae4a98211d7,-72.13664597306e/-61.65dc5bdd97d/2d.3ae4a98211d7,4e.4915f7875b0f/-61.3faa6b0d3b11/2d.3ae4a98211d7,4e.491c59c6eb23/61.3fa995e38c73/2d.3ae4a98211d7,-72.1f027c44c8f/61.3faa23ff5632/2d.3ae4a98211d7,-142.254da663c231/-61.3fa907c7c2b4/2d.3ae4a98211d7,-81.23c54ee92553/-61.65dc5bdd97d/2d.3ae4a98211d7,-81.23c04fef0d9c/61.3faa23ff5632/2d.3ae4a98211d7,-142.3baa1c61a5f/61.3faa6b0d3b11/2d.3ae4a98211d7,-142.254bfc1064f4/-63.5af25ed783d1/-2c.365af987c69b,-81.23c241504fb8/-63.5af2825e7641/-2c.365af987c69b,-81.23c54ee92553/-63.5af2a5e568b1/2c.365af987c69b,-142.254da663c231/-63.5af1f442ac82/2c.365af987c69b,-142.3baa1c61a5f/64.0000470de4e0/2c.365af987c69b,-81.23c04fef0d9c/64/2c.365af987c69b,-81.23bf7ac55efd/64.0000d529ae9f/-2c.365af987c69b,-142.2548194de0bb/64.000011c37937e/-2c.365af987c69b,-79.490caf794c95/-129.3faa23ff5632/-2c.365b4095ab7a,-79.490fbd122230/-129.3faa23ff5632/2c.365ad600d42b,-79.74e517f08d8/-66.1b485e5f200f/2c.365af987c69b,-79.490c686b67b5/-66.1b485e5f200f/-2c.365af987c69b,-72.1366d3b2fa2d/-129.3faa23ff5632/2d.24cebd889c1ac,4e.4915696b9150/-129.3faa23ff5632/2d.24cebd889c1ac,4e.4915f7875b0f/-66.1b493388ceae/2d.3ae4a98211d7,-72.13664597306e/-66.1b48a56d04ef/2d.3ae4a98211d7,4e.4919da49df48/-129.3faa23ff5632/-2d.24cf1659fa322,-72.1363c61a2492/-129.3faa23ff5632/-2d.24cf1659fa322,-72.136337fe5ad3/-66.1b485e5f200f/-2d.3ae4a98211d7,4e.74f69bbfa04/-66.1b48a56d04ef/-2d.3ae4a98211d7,56.23cb895e5e32/-129.3faa23ff5632/2c.365ad600d42b,56.394c51e4721/-129.3faa23ff5632/-2c.365b4095ab7a,56.23d0414a910a/-66.1b485e5f200f/-2c.365af987c69b,56.23cbd06c4311/-66.1b493388ceae/2c.365af987c69b,-72.1363c61a2492/-12b.918403ca56d/-2c.365b4095ab7a,4e.4919da49df48/-12b.918403ca56d/-2c.365b4095ab7a,4e.4915696b9150/-12c.0000e35fa93/2c.365ad600d42b,-72.1366d3b2fa2d/-12b.918403ca56d/2c.365ad600d42b,-79.4909e8ee5bda/129.3faa23ff5632/2c.365b641c9dea,-79.74db52d4486/129.3fab4036e9b0/-2c.21f89957d58f3,-79.74dc3633f19/66.1b49c1a4986d/-2c.365af987c69b,-79.490a770a2599/66.1b48ec7ae9ce/2c.365af987c69b,4e.491ce7e2b4e2/129.65db3fa6045/2d.24cf1659fa322,-72.1360ff8f33d7/129.3faa23ff5632/2d.24cf1659fa322,-72.1f027c44c8f/66.1b48a56d04ef/2d.3ae4a98211d7,4e.491ca0d4d003/66.1b485e5f200f/2d.3ae4a98211d7,-72.13602a658539/129.3fab4036e9b0/-2d.3ae43eed3a88,4e.491b849d3c85/129.3faa23ff5632/-2d.3ae43eed3a88,4e.491b3d8f57a5/66.1b493388ceae/-2d.3ae4a98211d7,-72.136071736a18/66.1b49c1a4986d/-2d.3ae4a98211d7,56.23d1a4900967/129.3faa23ff5632/-2c.21f89957d58f3,56.23d307d581c5/129.65db3fa6045/2c.365b641c9dea,56.23d279b9b806/66.1b485e5f200f/2c.365af987c69b,56.23d116743fa8/66.1b493388ceae/-2c.365af987c69b,-72.1360ff8f33d7/12b.918403ca56d/2c.365b641c9dea,4e.491ce7e2b4e2/12b.918403ca56d/2c.365b641c9dea,4e.491b849d3c85/12c.0000e35fa93/-2c.21f89957d58f3,-72.13602a658539/12c.0000e35fa93/-2c.21f89957d58f3";
			var geo0uvs:String ="0.270f/0,0.5/1,0/0";
			var geo0faces:String ="0,1,2,0,1,2,0,2,3,0,1,2,4,5,6,0,1,2,4,6,7,0,1,2,8,9,a,0,1,2,8,a,b,0,1,2,c,d,e,0,1,2,c,e,f,0,1,2,10,11,12,0,1,2,10,12,13,0,1,2,14,15,16,0,1,2,14,16,17,0,1,2,18,19,1a,0,1,2,18,1a,1b,0,1,2,1c,1d,1e,0,1,2,1c,1e,1f,0,1,2,20,21,22,0,1,2,20,22,23,0,1,2,24,25,26,0,1,2,24,26,27,0,1,2,28,29,2a,0,1,2,28,2a,2b,0,1,2,2c,2d,2e,0,1,2,2c,2e,2f,0,1,2,30,31,32,0,1,2,30,32,33,0,1,2,34,35,36,0,1,2,34,36,37,0,1,2,38,39,3a,0,1,2,38,3a,3b,0,1,2,3c,3d,3e,0,1,2,3c,3e,3f,0,1,2,40,41,42,0,1,2,40,42,43,0,1,2,44,45,46,0,1,2,44,46,47,0,1,2,48,49,4a,0,1,2,48,4a,4b,0,1,2,4c,4d,4e,0,1,2,4c,4e,4f,0,1,2,50,51,52,0,1,2,50,52,53,0,1,2,54,55,56,0,1,2,54,56,57,0,1,2,0,16,15,0,1,2,0,15,1,0,1,2,d,2,1,0,1,2,d,1,e,0,1,2,b,0,3,0,1,2,b,3,8,0,1,2,2,12,11,0,1,2,2,11,3,0,1,2,2b,7,6,0,1,2,2b,6,28,0,1,2,27,4,7,0,1,2,27,7,24,0,1,2,5,1c,1f,0,1,2,5,1f,6,0,1,2,4,2c,2f,0,1,2,4,2f,5,0,1,2,a,17,16,0,1,2,a,16,b,0,1,2,19,a,9,0,1,2,19,9,1a,0,1,2,10,9,8,0,1,2,10,8,11,0,1,2,14,f,e,0,1,2,14,e,15,0,1,2,f,22,21,0,1,2,f,21,c,0,1,2,c,13,12,0,1,2,c,12,d,0,1,2,13,3f,3e,0,1,2,13,3e,10,0,1,2,52,14,17,0,1,2,52,17,53,0,1,2,3a,1b,1a,0,1,2,3a,1a,3b,0,1,2,1d,18,1b,0,1,2,1d,1b,1e,0,1,2,18,4f,4e,0,1,2,18,4e,19,0,1,2,1e,29,28,0,1,2,1e,28,1f,0,1,2,2e,1d,1c,0,1,2,2e,1c,2f,0,1,2,4a,23,22,0,1,2,4a,22,4b,0,1,2,23,26,25,0,1,2,23,25,20,0,1,2,20,37,36,0,1,2,20,36,21,0,1,2,26,2d,2c,0,1,2,26,2c,27,0,1,2,2a,25,24,0,1,2,2a,24,2b,0,1,2,32,2a,29,0,1,2,32,29,33,0,1,2,2d,47,46,0,1,2,2d,46,2e,0,1,2,39,30,33,0,1,2,39,33,3a,0,1,2,31,34,37,0,1,2,31,37,32,0,1,2,30,40,43,0,1,2,30,43,31,0,1,2,35,3c,3f,0,1,2,35,3f,36,0,1,2,42,35,34,0,1,2,42,34,43,0,1,2,3d,38,3b,0,1,2,3d,3b,3e,0,1,2,38,41,40,0,1,2,38,40,39,0,1,2,41,3d,3c,0,1,2,41,3c,42,0,1,2,49,44,47,0,1,2,49,47,4a,0,1,2,45,4c,4f,0,1,2,45,4f,46,0,1,2,57,45,44,0,1,2,57,44,54,0,1,2,51,48,4b,0,1,2,51,4b,52,0,1,2,48,55,54,0,1,2,48,54,49,0,1,2,4d,50,53,0,1,2,4d,53,4e,0,1,2,56,4d,4c,0,1,2,56,4c,57,0,1,2,50,56,55,0,1,2,50,55,51,0,1,2,0,b,16,0,1,2,3,11,8,0,1,2,6,1f,28,0,1,2,5,2f,1c,0,1,2,1,15,e,0,1,2,2,d,12,0,1,2,7,2b,24,0,1,2,4,27,2c,0,1,2,1a,10,3e,0,1,2,1a,3e,3b,0,1,2,17,19,4e,0,1,2,17,4e,53,0,1,2,13,21,36,0,1,2,13,36,3f,0,1,2,22,14,52,0,1,2,22,52,4b,0,1,2,29,1b,3a,0,1,2,29,3a,33,0,1,2,18,2e,46,0,1,2,18,46,4f,0,1,2,20,2a,32,0,1,2,20,32,37,0,1,2,2d,23,4a,0,1,2,2d,4a,47,0,1,2,31,43,34,0,1,2,30,39,40,0,1,2,35,42,3c,0,1,2,38,3d,41,0,1,2,44,49,54,0,1,2,45,57,4c,0,1,2,48,51,55,0,1,2,4d,56,50,0,1,2,10,1a,9,0,1,2,19,17,a,0,1,2,21,13,c,0,1,2,14,22,f,0,1,2,1b,29,1e,0,1,2,2e,18,1d,0,1,2,2a,20,25,0,1,2,23,2d,26,0,1,2";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var cube_Bitmap:Bitmap = new Cube_Bitmap_Bitmap();
				applyMaterialToMesh("cube", cube_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}