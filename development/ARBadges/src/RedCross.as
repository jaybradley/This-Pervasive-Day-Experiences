//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package 
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.core.base.*;
	import away3d.loaders.data.*;
	import away3d.loaders.utils.*;
	import away3d.materials.*;
	import away3d.primitives.*;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.geom.*;
	import flash.utils.Dictionary;

	public class RedCross extends Mesh
	{
		[Embed(source="textures/aw_0.jpg")]
		private var Aw_0_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function RedCross(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
			
			this.ownCanvas = true;
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,4.692549999999995*_scale,47.15365*_scale,29.348149999999997*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"aw_0",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:-1, bothsides:true, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					this.type = ".as";
					this.bothsides = ref.bothsides;
					this.name = ref.name;
					this.pushfront = ref.pushfront;
					this.pushback = ref.pushback;
					this.ownCanvas = ref.ownCanvas;

					oList.push(this);
					this.transform = ref.transform;
					this.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						this.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					this.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="149.18687/2c.365b1f985201/-61.3fab4f2851ff,14a.000f/2c.365b1f985201/61.1116b,149.1869b/-2c.e975/61.1116b,149.1869b/-2c.e975/-61.3fab4f2851ff,-14a.00005/-2c.e975/-61.3fab4f2851ff,-149.5af1e6744dfc/-2c.e975/61.3fab4f2851ff,-14a.00005/2c.365b1f985201/61.1116b,-14a.000f/2c.365b1f985201/-61.3fa8fb1c6dff,5d.18051/-2d.24cf17bb96bfb/61.1116b,5d.18047/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,142.a023/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,142.a023/-2d.24cf17bb96bfb/61.1116b,142.254d8c816604/2d.24cf17bb96bfb/61.1116b,142.25443c51d603/2d.24cf17bb96bfb/-61.3fab4f2851ff,5d.59740ed63e01/2d.24cf17bb96bfb/-61.3fab4f2851ff,5d.18051/2d.24cf17bb96bfb/61.1116b,142.25443c51d603/2c.365b1f985201/-64.00005,142.a023/-2c.e975/-64.00005,5d.18047/-2c.e975/-64.00005,5d.59740ed63e01/2c.365b1f985201/-64.00005,142.a023/-2c.e975/63.5af1e6744e01,142.254d8c816604/2c.365b1f985201/63.5af1e6744e01,5d.18051/2c.365b1f985201/63.5af1e6744e01,5d.18051/-2c.e975/63.5af1e6744e01,4e.4919c352e601/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,4e.491c175eca01/-2d.24cf17bb96bfb/61.1116b,-72.5339/-2d.24cf17bb96bfb/61.1116b,-72.1362c900ddfe/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,-81.9993/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,-81.9989/-2d.24cf17bb96bfb/61.1116b,-142.a023/-2d.24cf17bb96bfb/61.3fab4f2851ff,-142.a02d/-2d.3ae29eb9d9ff/-61.3fab4f2851ff,4e.491c175eca01/2d.24cf17bb96bfb/61.1116b,4e.139e3/2d.24cf17bb96bfb/-61.3fab4f2851ff,-72.534d/2d.24cf17bb96bfb/-61.3fab4f2851ff,-72.5339/2d.24cf17bb96bfb/61.1116b,-81.9989/2d.24cf17bb96bfb/61.1116b,-81.999d/2d.24cf17bb96bfb/-61.3fab4f2851ff,-142.a037/2d.24cf17bb96bfb/-61.3fa8fb1c6dff,-142.a02d/2d.24cf17bb96bfb/61.1116b,-81.999d/2c.365b1f985201/-64.00005,-81.9993/-2c.e975/-64.00005,-142.a02d/-2c.e975/-64.00005,-142.a037/2c.365b1f985201/-63.1869b,-81.9989/-2c.e975/63.5af1e6744e01,-81.9989/2c.365b1f985201/63.5af1e6744e01,-142.a02d/2c.365b1f985201/63.5af1e6744e01,-142.a023/-2c.e975/64.00005,-79.490e1f1771ff/2c.365b1f985201/-66.7535,-79.139cf/2c.365b1f985201/-129.11175,-79.490bcb0b8dff/-2c.e975/-129.11175,-79.490bcb0b8dff/-2c.e975/-66.7535,4e.139e3/2d.24cf17bb96bfb/-66.7535,4e.139e3/2d.24cf17bb96bfb/-129.11175,-72.13677118a5ff/2d.24cf17bb96bfb/-129.11175,-72.534d/2d.24cf17bb96bfb/-66.7535,-72.1362c900ddfe/-2d.3ae29eb9d9ff/-66.7535,-72.1362c900ddfe/-2d.24cf17bb96bfb/-129.11175,4e.4919c352e601/-2d.24cf17bb96bfb/-129.11175,4e.4919c352e601/-2d.3ae29eb9d9ff/-66.7535,56.99cf/-2c.e975/-66.7535,56.99cf/-2c.e975/-129.11175,56.99bb/2c.365b1f985201/-129.11175,56.99bb/2c.365b1f985201/-66.7535,4e.139e3/2c.365b1f985201/-12c.00005,4e.4919c352e601/-2c.e975/-12c.00005,-72.1362c900ddfe/-2c.e975/-12c.00005,-72.13677118a5ff/2c.365b1f985201/-12c.00005,-79.139b1/-2c.e975/66.1b47c151ee01,-79.139b1/-2c.e975/129.11175,-79.139b1/2c.365b1f985201/129.1116b,-79.139b1/2c.365b1f985201/66.1b47c151ee01,-72.5339/2d.24cf17bb96bfb/66.1b47c151ee01,-72.5339/2d.24cf17bb96bfb/129.1116b,4e.491c175eca01/2d.24cf17bb96bfb/129.1116b,4e.491c175eca01/2d.24cf17bb96bfb/66.1b47c151ee01,4e.491c175eca01/-2d.24cf17bb96bfb/66.1b47c151ee01,4e.491c175eca01/-2d.3ae29eb9d9ff/129.1116b,-72.5339/-2d.3ae29eb9d9ff/129.11175,-72.5339/-2d.24cf17bb96bfb/66.1b47c151ee01,56.99d9/2c.365b1f985201/66.1b47c151ee01,56.99d9/2c.365b1f985201/129.1116b,56.99d9/-2c.e975/129.1116b,56.99d9/-2c.e975/66.1b47c151ee01,4e.491c175eca01/-2c.e975/12b.1869b,4e.491c175eca01/2c.365b1f985201/12b.1869b,-72.5339/2c.365b1f985201/12b.1869b,-72.5339/-2c.e975/12c.00005";
			var geo0uvs:String ="0.270f/0,0.5/1,0/0";
			var geo0faces:String ="0,1,2,0,1,2,3,0,2,0,1,2,4,5,6,0,1,2,7,4,6,0,1,2,8,9,a,0,1,2,b,8,a,0,1,2,c,d,e,0,1,2,f,c,e,0,1,2,10,11,12,0,1,2,13,10,12,0,1,2,14,15,16,0,1,2,17,14,16,0,1,2,18,19,1a,0,1,2,1b,18,1a,0,1,2,1c,1d,1e,0,1,2,1f,1c,1e,0,1,2,20,21,22,0,1,2,23,20,22,0,1,2,24,25,26,0,1,2,27,24,26,0,1,2,28,29,2a,0,1,2,2b,28,2a,0,1,2,2c,2d,2e,0,1,2,2f,2c,2e,0,1,2,30,31,32,0,1,2,33,30,32,0,1,2,34,35,36,0,1,2,37,34,36,0,1,2,38,39,3a,0,1,2,3b,38,3a,0,1,2,3c,3d,3e,0,1,2,3f,3c,3e,0,1,2,40,41,42,0,1,2,43,40,42,0,1,2,44,45,46,0,1,2,47,44,46,0,1,2,48,49,4a,0,1,2,4b,48,4a,0,1,2,4c,4d,4e,0,1,2,4f,4c,4e,0,1,2,50,51,52,0,1,2,53,50,52,0,1,2,54,55,56,0,1,2,57,54,56,0,1,2,15,14,2,0,1,2,1,15,2,0,1,2,1,0,d,0,1,2,c,1,d,0,1,2,3,2,b,0,1,2,a,3,b,0,1,2,11,10,0,0,1,2,3,11,0,0,1,2,4,7,2b,0,1,2,2a,4,2b,0,1,2,7,6,27,0,1,2,26,7,27,0,1,2,1f,1e,5,0,1,2,4,1f,5,0,1,2,2f,2e,6,0,1,2,5,2f,6,0,1,2,14,17,8,0,1,2,b,14,8,0,1,2,9,8,19,0,1,2,18,9,19,0,1,2,a,9,12,0,1,2,11,a,12,0,1,2,c,f,16,0,1,2,15,c,16,0,1,2,21,20,f,0,1,2,e,21,f,0,1,2,10,13,e,0,1,2,d,10,e,0,1,2,3c,3f,13,0,1,2,12,3c,13,0,1,2,17,16,50,0,1,2,53,17,50,0,1,2,18,1b,38,0,1,2,3b,18,38,0,1,2,1b,1a,1d,0,1,2,1c,1b,1d,0,1,2,4c,4f,1a,0,1,2,19,4c,1a,0,1,2,2a,29,1c,0,1,2,1f,2a,1c,0,1,2,1e,1d,2c,0,1,2,2f,1e,2c,0,1,2,20,23,48,0,1,2,4b,20,48,0,1,2,25,24,23,0,1,2,22,25,23,0,1,2,34,37,22,0,1,2,21,34,22,0,1,2,2e,2d,24,0,1,2,27,2e,24,0,1,2,26,25,28,0,1,2,2b,26,28,0,1,2,29,28,30,0,1,2,33,29,30,0,1,2,44,47,2d,0,1,2,2c,44,2d,0,1,2,33,32,39,0,1,2,38,33,39,0,1,2,37,36,31,0,1,2,30,37,31,0,1,2,43,42,32,0,1,2,31,43,32,0,1,2,3f,3e,35,0,1,2,34,3f,35,0,1,2,36,35,40,0,1,2,43,36,40,0,1,2,3b,3a,3d,0,1,2,3c,3b,3d,0,1,2,42,41,3a,0,1,2,39,42,3a,0,1,2,3e,3d,41,0,1,2,40,3e,41,0,1,2,47,46,49,0,1,2,48,47,49,0,1,2,4f,4e,45,0,1,2,44,4f,45,0,1,2,46,45,57,0,1,2,56,46,57,0,1,2,4b,4a,51,0,1,2,50,4b,51,0,1,2,56,55,4a,0,1,2,49,56,4a,0,1,2,53,52,4d,0,1,2,4c,53,4d,0,1,2,4e,4d,54,0,1,2,57,4e,54,0,1,2,55,54,52,0,1,2,51,55,52,0,1,2,14,b,2,0,1,2,a,11,3,0,1,2,2a,1f,4,0,1,2,1e,2f,5,0,1,2,c,15,1,0,1,2,10,d,0,0,1,2,26,2b,7,0,1,2,2e,27,6,0,1,2,3c,12,18,0,1,2,3b,3c,18,0,1,2,4c,19,17,0,1,2,53,4c,17,0,1,2,34,21,13,0,1,2,3f,34,13,0,1,2,50,16,20,0,1,2,4b,50,20,0,1,2,38,1b,29,0,1,2,33,38,29,0,1,2,44,2c,1a,0,1,2,4f,44,1a,0,1,2,30,28,22,0,1,2,37,30,22,0,1,2,48,23,2d,0,1,2,47,48,2d,0,1,2,36,43,31,0,1,2,42,39,32,0,1,2,3e,40,35,0,1,2,41,3d,3a,0,1,2,56,49,46,0,1,2,4e,57,45,0,1,2,55,51,4a,0,1,2,52,54,4d,0,1,2,9,18,12,0,1,2,8,17,19,0,1,2,e,13,21,0,1,2,f,20,16,0,1,2,1c,29,1b,0,1,2,1d,1a,2c,0,1,2,25,22,28,0,1,2,24,2d,23,0,1,2";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var aw_0_Bitmap:Bitmap = new Aw_0_Bitmap_Bitmap();
				applyMaterialToMesh("aw_0", aw_0_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					//meshes[i].material = new BitmapMaterial(bmd);
						meshes[i].material = new PhongBitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}